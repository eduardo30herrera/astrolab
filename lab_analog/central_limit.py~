#### Eduardo Herrera Astro Radio Lab #####
####   Central Limit Theorem Code    ##### 

import numpy as np 
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab

#### this part of the code will demonstrate that in the large-N limit, adding samples from non-Gaussian random distributions converges to a Gaussian one.

print 
print 'approaching a normal distribution by some random samples'
print 
print 'the original distribution, some random numbers generated by the random.random_integers function'
print

#### creating the values to input into the Gaussian

a = input('type in a max value for this distribution: ')
print
b = input('give a sample size: ')
print
c = input('define some N: ')
print

#### Defining the random distribution of size a

x = [] # random results from 0 to a 

for i in np.arange(float(a + 1)):
    x.append(float(np.random.random_integers(a)))

#### Choosing your sample size
d = [] # index of sample x
m = [] # list for the means
res = [] # list with the means 

n = 0

while n < c:
    for i in np.arange(b):
        d.append(np.random.random_integers(a))
    
    for i in d:
        m.append(x[i])
    
    res.append(np.sum(m)/len(m))

    m = []
    d = []
    n = n + 1

#### plotting our results

n, bins, patches = plt.hist(res, 50, normed = 1, facecolor='g') 
plt.xlabel(r'Means', size = 17)
plt.ylabel(r'Normalized Occurences', size = 17)
plt.title(r'Histogram', size = 20)

m1 = np.mean(res)
s1 = np.std(res)
g = mlab.normpdf(bins, m1, s1)
plt.plot(bins, g, 'r-')

plt.show()

#### Choosing another N
s = raw_input('Choose another N? y/n')

n = 0

while s =='y':

    print
    c = input('Define your N:')
    print

    while n < c:
        for i in np.arange(b):
            d.append(np.random.random_integers(a))

        for i in d:
            m.append(x[i])

        res.append(np.sum(m)/len(m))

        m = []
        d = []
        n = n + 1

#### plotting

    n, bins, patches = plt.hist(res, 50, normed = 1, facecolor='g')
    plt.xlabel(r'Means', size = 17)
    plt.ylabel(r'Normalized Occurences', size = 17)
    plt.title(r'Histogram', size = 20)

    m1 = np.mean(res)
    s1 = np.std(res)
    g = mlab.normpdf(bins, m1, s1)
    plt.plot(bins, g, 'r-')

    plt.show()

    s = raw_input('Choose another N? y/n')

    n = 0

else:
    print 'program over'
    
